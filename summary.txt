
树：
1、根据本节点的访问顺序有三种遍历方法：前序、中序、后序——可以使用DFS\BFS实现遍历；
——dfs：时间复杂度：O(n)O(n)。即遍历这棵树的复杂度。 空间复杂度：O(n)。即递归的栈空间的空间代价

2、Morris Traversal——实现空间复杂度O(1)；

2、二叉搜索树，左节点小于等于本节点、右节点大于等于本节点；——中序遍历后，是非递减的有序序列；

3、遍历加回溯的运用；

4、并查集：

5、动态规划

6、递归运用：考虑递归前、递归返回做什么动作，返回值、出口条件；
void reverse()
    //出口条件
    //递归前动作
    reverse();
    //递归返回时动作
}

7、大堆小堆：
最差情况下插入的时间复杂度为O(logn)；
平均情况下插入的复杂度为O(1)
构造n个元素二叉堆：复杂度为O(nlogn)。

排序:
快排：

单调栈：找出左右两边边第一个比自己小或者大
有时候需要两遍，中心扩散：如左边第一个比自己小和右边第一比自己小的区间；


STL tricks:
不需要关注相对位置的快速删除vector里面元素：将要删除的元素与结尾元素交换，删除结尾元素；
使用vector也可以模拟stack,并且能正序地遍历整个数据；
维护区间内的最大最小值，单调队列或者set集合；只需要一个可以用优先级队列

链表：
快慢指针找中间点；
归并排序链表O（n(logn)）;
反转： 原地反转，递归反转；

图论：
求解多少个连通分量： bfs/dfs、并查集；
求解是否成环：拓扑排序；

并查集：
1、不一定使用数组，可以使用hash，索引根节点；
2、对于二维的位置，可将 row*rowNums + col作为索引；
3、并查集是分散的连通分量进行合并，有些题目需要逆向思维；

双指针/滑动窗口：
left不动，right向右移动；条件不满足再移动left直到条件满足;
典型题目：
1052. 爱生气的书店老板、1004. 最大连续1的个数

分治算法：
395. 至少有 K 个重复字符的最长子串


连续数组问题：
可以考虑前缀和；两个前缀和相减即是中间和的长度；
class NumArray {
public:
    vector<int> sums;
    NumArray(vector<int>& nums) {
        int n = nums.size();
        sums.resize(n + 1);
        for (int i = 0; i < n; i++) {
            sums[i + 1] = sums[i] + nums[i];
        }
    }

    int sumRange(int i, int j) {
        return sums[j + 1] - sums[i];
    }
};

状态压缩： 1178. 猜字谜
枚举二进制子集：
function get_subset(bitmask)
    subset = bitmask
    answer = [bitmask]
    while subset != 0
        subset = (subset - 1) & bitmask
        put subset into the answer list
    end while
    return answer
end function


字典树：
struct TrieNode {
    int frequency = 0;
    TrieNode* child[26];

    TrieNode() {
        for (int i = 0; i < 26; ++i) {
            child[i] = nullptr;
        }
    }
};
auto add = [&](const string& word) {
    TrieNode* cur = root;
    for (char ch : word) {
        if (!cur->child[ch - 'a']) {
            cur->child[ch - 'a'] = new TrieNode();
        }
        cur = cur->child[ch - 'a'];
    }
    ++cur->frequency;
};

