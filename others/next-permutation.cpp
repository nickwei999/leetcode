// 实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

// 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

// 必须原地修改，只允许使用额外常数空间。

// 以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
// 1,2,3 → 1,3,2
// 3,2,1 → 1,2,3
// 1,1,5 → 1,5,1

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/next-permutation
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// 方法：
// 1、从后往前找到第一个升序对：对应下标为[i,i+1]; 此时[i+1,N]必然是逆序的；
// 2、从后往前找第一个比data[i]大的元素，下标为j;
// 3、swap(data[i], data[j]);
// 4、反转[i+1,N];  reverse(data.begin()+i+1, data.end());
// 时间复杂度O(n),空间复杂度O(1);

// C++库方法 https://en.cppreference.com/w/cpp/algorithm/next_permutation

class Solution {
   public:
    void nextPermutation(vector<int>& nums) {
        int i = nums.size() - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            --i;
        }
        if (i >= 0) {
            int j = nums.size() - 1;
            while (nums[j] <= nums[i]) {
                --j;
            }
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + i + 1, nums.end());
    }
};

// 算法推导.我们可以这样来分析：

// 我们希望下一个数比当前数大，这样才满足“下一个排列”的定义。因此只需要将后面的「大数」与前面的「小数」交换，就能得到一个更大的数。
// 比如 123456，将 5 和 6 交换就能得到一个更大的数 123465。
// 我们还希望下一个数增加的幅度尽可能的小，这样才满足“下一个排列与当前排列紧邻“的要求。为了满足这个要求，我们需要：
// 在尽可能靠右的低位进行交换，需要从后向前查找
// 将一个 尽可能小的「大数」 与前面的「小数」交换。比如 123465，下一个排列应该把 5 和 4 交换而不是把 6 和 4 交换
// 将「大数」换到前面后，需要将「大数」后面的所有数重置为升序，升序排列就是最小的排列。
// 以 123465 为例：首先按照上一步，交换 5 和 4，得到 123564；然后需要将 5 之后的数重置为升序，得到 123546。
// 显然 123546 比 123564 更小，123546 就是 123465 的下一个排列
