// ??????????????????????????????????????????????????????????????????????????????????????????????????

// ???????? x ???????????????? x
// ????????????????????????? xstart?xend? ???
//  xstart ? x ? xend?????????????????????????
// ??????????????????????????????????????????????

// ?????? points ??? points [i] = [xstart,xend]
// ?????????????????????

//  
// ?? 1?

// ???points = [[10,16],[2,8],[1,6],[7,12]]
// ???2
// ?????????x = 6 ???? [2,8],[1,6] ??????? x = 11
// ???????? ?? 2?

// ???points = [[1,2],[3,4],[5,6],[7,8]]
// ???4
// ?? 3?

// ???points = [[1,2],[2,3],[3,4],[4,5]]
// ???2
// ?? 4?

// ???points = [[1,2]]
// ???1
// ?? 5?

// ???points = [[2,3],[2,3]]
// ???1

// ??????LeetCode?
// ???https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons
// ??????????????????????????????????

/* ???
?????????DP?
dp(n) ??n????????????
dp(n + 1) ??????? ?????????????????????????
dp(n) ??????????n???????????right?????????? */
/* if (right < points[n][0]) {
    dp(n + 1) = dp(n) + 1;
    right = points[0][1];
}
 */

class Solution {
   public:
    int findMinArrowShots(vector<vector<int>> &points) {
        if (points.empty()) {
            return 0;
        }
        sort(points.begin(), points.end(),
             [](vector<int> &a, vector<int> &b) { return a[1] < b[1]; });
        int res = 1;
        int right = points[0][1];
        for (auto &x : points) {
            if (x[0] > right) {
                right = x[1];
                ++res;
            }
        }
        return res;
    }
};